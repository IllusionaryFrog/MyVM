
// 000
fun{unsafe, inline, asm} .asm.nop(:) {
    "nop"
}

// 001
fun{unsafe, inline, asm} .asm.halt(:!) {
    "halt"
}

// 002
fun{unsafe, inline, asm} .asm.call(u64:) {
    "call"
}

// 003
fun{unsafe, inline, asm} .asm.return(:) {
    "return"
}

// 004
fun{unsafe, inline, asm} .asm.inter(:!) {
    "inter"
}

// 005
fun{unsafe, inline, asm} .asm.alloc(u64:u64) {
    "alloc"
}

// 006
fun{unsafe, inline, asm} .asm.read(string:u64) {
    "read"
}

// 007
fun{unsafe, inline, asm} .asm.write(string:u64) {
    "write"
}

// 008
fun{unsafe, inline, asm} .asm.read.file(string,string:u64) {
    "read_file"
}

// 009
fun{unsafe, inline, asm} .asm.write.file(string,string:u64) {
    "write_file"
}


// 015
fun{unsafe, inline, asm} .asm.pop.sp(u64:) {
    "pop_sp"
}

// 016
fun{unsafe, inline, asm} .asm.pop.cs(u64:) {
    "pop_cs"
}

// 017
fun{unsafe, inline, asm} .asm.pop.ih(u64:) {
    "pop_ih"
}

// 018
fun{unsafe, inline, asm} .asm.pop.ir(i8:) {
    "pop_ir"
}

// 019
fun{unsafe, inline, asm} .asm.push.ir(:i8) {
    "push_ir"
}


// 020
fun{unsafe, inline, asm} .asm.drop(u8:) {
    "drop_u8"
}

// 021
fun{unsafe, inline, asm} .asm.drop(u16:) {
    "drop_u16"
}

// 022
fun{unsafe, inline, asm} .asm.drop(u32:) {
    "drop_u32"
}

// 023
fun{unsafe, inline, asm} .asm.drop(u64:) {
    "drop_u64"
}

// 024
fun{unsafe, inline, asm} .asm.drop(u128:) {
    "drop_u128"
}

// 025
fun{unsafe, inline, asm} .asm.negate(i8:i8) {
    "negate_i8"
}

// 026
fun{unsafe, inline, asm} .asm.negate(i16:i16) {
    "negate_i16"
}

// 027
fun{unsafe, inline, asm} .asm.negate(i32:i32) {
    "negate_i32"
}

// 028
fun{unsafe, inline, asm} .asm.negate(i64:i64) {
    "negate_i64"
}

// 029
fun{unsafe, inline, asm} .asm.negate(i128:i128) {
    "negate_i128"
}


// 030
fun{unsafe, inline, asm} .asm.swap(u8,u8:u8,u8) {
    "swap_u8"
}

// 031
fun{unsafe, inline, asm} .asm.swap(u16,u16:u16,u16) {
    "swap_u16"
}

// 032
fun{unsafe, inline, asm} .asm.swap(u32,u32:u32,u32) {
    "swap_u32"
}

// 033
fun{unsafe, inline, asm} .asm.swap(u64,u64:u64,u64) {
    "swap_u64"
}

// 034
fun{unsafe, inline, asm} .asm.swap(u128,u128:u128,u128) {
    "swap_u128"
}

// 035
fun{unsafe, inline, asm} .asm.rotate(u8,u8,u8:u8,u8,u8) {
    "rotate_u8"
}

// 036
fun{unsafe, inline, asm} .asm.rotate(u16,u16,u16:u16,u16,u16) {
    "rotate_u16"
}

// 037
fun{unsafe, inline, asm} .asm.rotate(u32,u32,u32:u32,u32,u32) {
    "rotate_u32"
}

// 038
fun{unsafe, inline, asm} .asm.rotate(u64,u64,u64:u64,u64,u64) {
    "rotate_u64"
}

// 039
fun{unsafe, inline, asm} .asm.rotate(u128,u128,u128:u128,u128,u128) {
    "rotate_u128"
}


// 040
fun{unsafe, inline, asm} .asm.dup(u8:u8,u8) {
    "dup_u8"
}

// 041
fun{unsafe, inline, asm} .asm.dup(u16:u16,u16) {
    "dup_u16"
}

// 042
fun{unsafe, inline, asm} .asm.dup(u32:u32,u32) {
    "dup_u32"
}

// 043
fun{unsafe, inline, asm} .asm.dup(u64:u64,u64) {
    "dup_u64"
}

// 044
fun{unsafe, inline, asm} .asm.dup(u128:u128,u128) {
    "dup_u128"
}

// 045
fun{unsafe, inline, asm} .asm.over(u8,u8:u8,u8,u8) {
    "over_u8"
}

// 046
fun{unsafe, inline, asm} .asm.over(u16,u16:u16,u16,u16) {
    "over_u16"
}

// 047
fun{unsafe, inline, asm} .asm.over(u32,u32:u32,u32,u32) {
    "over_u32"
}

// 048
fun{unsafe, inline, asm} .asm.over(u64,u64:u64,u64,u64) {
    "over_u64"
}

// 049
fun{unsafe, inline, asm} .asm.over(u128,u128:u128,u128,u128) {
    "over_u128"
}


// 050
fun{unsafe, inline, asm} .asm.and(u8,u8:u8) {
    "and_u8"
}

// 051
fun{unsafe, inline, asm} .asm.and(u16,u16:u16) {
    "and_u16"
}

// 052
fun{unsafe, inline, asm} .asm.and(u32,u32:u32) {
    "and_u32"
}

// 053
fun{unsafe, inline, asm} .asm.and(u64,u64:u64) {
    "and_u64"
}

// 054
fun{unsafe, inline, asm} .asm.and(u128,u128:u128) {
    "and_u128"
}

// 055
fun{unsafe, inline, asm} .asm.or(u8,u8:u8) {
    "or_u8"
}

// 056
fun{unsafe, inline, asm} .asm.or(u16,u16:u16) {
    "or_u16"
}

// 057
fun{unsafe, inline, asm} .asm.or(u32,u32:u32) {
    "or_u32"
}

// 058
fun{unsafe, inline, asm} .asm.or(u64,u64:u64) {
    "or_u64"
}

// 059
fun{unsafe, inline, asm} .asm.or(u128,u128:u128) {
    "or_u128"
}


// 060
fun{unsafe, inline, asm} .asm.shift.l(u8,u8:u8) {
    "shift_l_u8"
}

// 061
fun{unsafe, inline, asm} .asm.shift.l(u16,u8:u16) {
    "shift_l_u16"
}

// 062
fun{unsafe, inline, asm} .asm.shift.l(u32,u8:u32) {
    "shift_l_u32"
}

// 063
fun{unsafe, inline, asm} .asm.shift.l(u64,u8:u64) {
    "shift_l_u64"
}

// 064
fun{unsafe, inline, asm} .asm.shift.l(u128,u8:u128) {
    "shift_l_u128"
}

// 065
fun{unsafe, inline, asm} .asm.shift.r(u8,u8:u8) {
    "shift_r_u8"
}

// 066
fun{unsafe, inline, asm} .asm.shift.r(u16,u8:u16) {
    "shift_r_u16"
}

// 067
fun{unsafe, inline, asm} .asm.shift.r(u32,u8:u32) {
    "shift_r_u32"
}

// 068
fun{unsafe, inline, asm} .asm.shift.r(u64,u8:u64) {
    "shift_r_u64"
}

// 069
fun{unsafe, inline, asm} .asm.shift.r(u128,u8:u128) {
    "shift_r_u128"
}


// 070
fun{unsafe, inline, asm} .asm.rotate.l(u8,u8:u8) {
    "rotate_l_u8"
}

// 071
fun{unsafe, inline, asm} .asm.rotate.l(u16,u8:u16) {
    "rotate_l_u16"
}

// 072
fun{unsafe, inline, asm} .asm.rotate.l(u32,u8:u32) {
    "rotate_l_u32"
}

// 073
fun{unsafe, inline, asm} .asm.rotate.l(u64,u8:u64) {
    "rotate_l_u64"
}

// 074
fun{unsafe, inline, asm} .asm.rotate.l(u128,u8:u128) {
    "rotate_l_u128"
}

// 075
fun{unsafe, inline, asm} .asm.rotate.r(u8,u8:u8) {
    "rotate_r_u8"
}

// 076
fun{unsafe, inline, asm} .asm.rotate.r(u16,u8:u16) {
    "rotate_r_u16"
}

// 077
fun{unsafe, inline, asm} .asm.rotate.r(u32,u8:u32) {
    "rotate_r_u32"
}

// 078
fun{unsafe, inline, asm} .asm.rotate.r(u64,u8:u64) {
    "rotate_r_u64"
}

// 079
fun{unsafe, inline, asm} .asm.rotate.r(u128,u8:u128) {
    "rotate_r_u128"
}


// 080
fun{unsafe, inline, asm} .asm.eq(u8,u8:bool) {
    "eq_u8"
}

// 081
fun{unsafe, inline, asm} .asm.eq(u16,u16:bool) {
    "eq_u16"
}

// 082
fun{unsafe, inline, asm} .asm.eq(u32,u32:bool) {
    "eq_u32"
}

// 083
fun{unsafe, inline, asm} .asm.eq(u64,u64:bool) {
    "eq_u64"
}

// 084
fun{unsafe, inline, asm} .asm.eq(u128,u128:bool) {
    "eq_u128"
}

// 085
fun{unsafe, inline, asm} .asm.not.eq(u8,u8:bool) {
    "not_eq_u8"
}

// 086
fun{unsafe, inline, asm} .asm.not.eq(u16,u16:bool) {
    "not_eq_u16"
}

// 087
fun{unsafe, inline, asm} .asm.not.eq(u32,u32:bool) {
    "not_eq_u32"
}

// 088
fun{unsafe, inline, asm} .asm.not.eq(u64,u64:bool) {
    "not_eq_u64"
}

// 089
fun{unsafe, inline, asm} .asm.not.eq(u128,u128:bool) {
    "not_eq_u128"
}


// 090
fun{unsafe, inline, asm} .asm.jump(u64:) {
    "jump"
}

// 091
fun{unsafe, inline, asm} .asm.jump.f(u64:) {
    "jump_f"
}

// 092
fun{unsafe, inline, asm} .asm.jump.b(u64:) {
    "jump_b"
}

// 093
// 094
fun{unsafe, inline, asm} .asm.sleep(u64:) {
    "sleep"
}

// 095
fun{unsafe, inline, asm} .asm.branch(u64,bool:) {
    "branch"
}

// 096
fun{unsafe, inline, asm} .asm.branch.f(u64,bool:) {
    "branch_f"
}

// 097
fun{unsafe, inline, asm} .asm.branch.b(u64,bool:) {
    "branch_b"
}

// 098
// 099

// 100
fun{unsafe, inline, asm} .asm.add(u8,u8:u8) {
    "add_u8"
}

// 101
fun{unsafe, inline, asm} .asm.add(u16,u16:u16) {
    "add_u16"
}

// 102
fun{unsafe, inline, asm} .asm.add(u32,u32:u32) {
    "add_u32"
}

// 103
fun{unsafe, inline, asm} .asm.add(u64,u64:u64) {
    "add_u64"
}

// 104
fun{unsafe, inline, asm} .asm.add(u128,u128:u128) {
    "add_u128"
}

// 105
fun{unsafe, inline, asm} .asm.add(i8,i8:i8) {
    "add_i8"
}

// 106
fun{unsafe, inline, asm} .asm.add(i16,i16:i16) {
    "add_i16"
}

// 107
fun{unsafe, inline, asm} .asm.add(i32,i32:i32) {
    "add_i32"
}

// 108
fun{unsafe, inline, asm} .asm.add(i64,i64:i64) {
    "add_i64"
}

// 109
fun{unsafe, inline, asm} .asm.add(i128,i128:i128) {
    "add_i128"
}


// 110
fun{unsafe, inline, asm} .asm.sub(u8,u8:u8) {
    "sub_u8"
}

// 111
fun{unsafe, inline, asm} .asm.sub(u16,u16:u16) {
    "sub_u16"
}

// 112
fun{unsafe, inline, asm} .asm.sub(u32,u32:u32) {
    "sub_u32"
}

// 113
fun{unsafe, inline, asm} .asm.sub(u64,u64:u64) {
    "sub_u64"
}

// 114
fun{unsafe, inline, asm} .asm.sub(u128,u128:u128) {
    "sub_u128"
}

// 115
fun{unsafe, inline, asm} .asm.sub(i8,i8:i8) {
    "sub_i8"
}

// 116
fun{unsafe, inline, asm} .asm.sub(i16,i16:i16) {
    "sub_i16"
}

// 117
fun{unsafe, inline, asm} .asm.sub(i32,i32:i32) {
    "sub_i32"
}

// 118
fun{unsafe, inline, asm} .asm.sub(i64,i64:i64) {
    "sub_i64"
}

// 119
fun{unsafe, inline, asm} .asm.sub(i128,i128:i128) {
    "sub_i128"
}


// 120
fun{unsafe, inline, asm} .asm.mul(u8,u8:u8) {
    "mul_u8"
}

// 121
fun{unsafe, inline, asm} .asm.mul(u16,u16:u16) {
    "mul_u16"
}

// 122
fun{unsafe, inline, asm} .asm.mul(u32,u32:u32) {
    "mul_u32"
}

// 123
fun{unsafe, inline, asm} .asm.mul(u64,u64:u64) {
    "mul_u64"
}

// 124
fun{unsafe, inline, asm} .asm.mul(u128,u128:u128) {
    "mul_u128"
}

// 125
fun{unsafe, inline, asm} .asm.mul(i8,i8:i8) {
    "mul_i8"
}

// 126
fun{unsafe, inline, asm} .asm.mul(i16,i16:i16) {
    "mul_i16"
}

// 127
fun{unsafe, inline, asm} .asm.mul(i32,i32:i32) {
    "mul_i32"
}

// 128
fun{unsafe, inline, asm} .asm.mul(i64,i64:i64) {
    "mul_i64"
}

// 129
fun{unsafe, inline, asm} .asm.mul(i128,i128:i128) {
    "mul_i128"
}


// 130
fun{unsafe, inline, asm} .asm.div(u8,u8:u8) {
    "div_u8"
}

// 131
fun{unsafe, inline, asm} .asm.div(u16,u16:u16) {
    "div_u16"
}

// 132
fun{unsafe, inline, asm} .asm.div(u32,u32:u32) {
    "div_u32"
}

// 133
fun{unsafe, inline, asm} .asm.div(u64,u64:u64) {
    "div_u64"
}

// 134
fun{unsafe, inline, asm} .asm.div(u128,u128:u128) {
    "div_u128"
}

// 135
fun{unsafe, inline, asm} .asm.div(i8,i8:i8) {
    "div_i8"
}

// 136
fun{unsafe, inline, asm} .asm.div(i16,i16:i16) {
    "div_i16"
}

// 137
fun{unsafe, inline, asm} .asm.div(i32,i32:i32) {
    "div_i32"
}

// 138
fun{unsafe, inline, asm} .asm.div(i64,i64:i64) {
    "div_i64"
}

// 139
fun{unsafe, inline, asm} .asm.div(i128,i128:i128) {
    "div_i128"
}


// 140
fun{unsafe, inline, asm} .asm.mod(u8,u8:u8) {
    "mod_u8"
}

// 141
fun{unsafe, inline, asm} .asm.mod(u16,u16:u16) {
    "mod_u16"
}

// 142
fun{unsafe, inline, asm} .asm.mod(u32,u32:u32) {
    "mod_u32"
}

// 143
fun{unsafe, inline, asm} .asm.mod(u64,u64:u64) {
    "mod_u64"
}

// 144
fun{unsafe, inline, asm} .asm.mod(u128,u128:u128) {
    "mod_u128"
}

// 145
fun{unsafe, inline, asm} .asm.mod(i8,i8:i8) {
    "mod_i8"
}

// 146
fun{unsafe, inline, asm} .asm.mod(i16,i16:i16) {
    "mod_i16"
}

// 147
fun{unsafe, inline, asm} .asm.mod(i32,i32:i32) {
    "mod_i32"
}

// 148
fun{unsafe, inline, asm} .asm.mod(i64,i64:i64) {
    "mod_i64"
}

// 149
fun{unsafe, inline, asm} .asm.mod(i128,i128:i128) {
    "mod_i128"
}


// 150
fun{unsafe, inline, asm} .asm.less(u8,u8:bool) {
    "less_u8"
}

// 151
fun{unsafe, inline, asm} .asm.less(u16,u16:bool) {
    "less_u16"
}

// 152
fun{unsafe, inline, asm} .asm.less(u32,u32:bool) {
    "less_u32"
}

// 153
fun{unsafe, inline, asm} .asm.less(u64,u64:bool) {
    "less_u64"
}

// 154
fun{unsafe, inline, asm} .asm.less(u128,u128:bool) {
    "less_u128"
}

// 155
fun{unsafe, inline, asm} .asm.less(i8,i8:bool) {
    "less_i8"
}

// 156
fun{unsafe, inline, asm} .asm.less(i16,i16:bool) {
    "less_i16"
}

// 157
fun{unsafe, inline, asm} .asm.less(i32,i32:bool) {
    "less_i32"
}

// 158
fun{unsafe, inline, asm} .asm.less(i64,i64:bool) {
    "less_i64"
}

// 159
fun{unsafe, inline, asm} .asm.less(i128,i128:bool) {
    "less_i128"
}


// 160
fun{unsafe, inline, asm} .asm.less.eq(u8,u8:bool) {
    "less_eq_u8"
}

// 161
fun{unsafe, inline, asm} .asm.less.eq(u16,u16:bool) {
    "less_eq_u16"
}

// 162
fun{unsafe, inline, asm} .asm.less.eq(u32,u32:bool) {
    "less_eq_u32"
}

// 163
fun{unsafe, inline, asm} .asm.less.eq(u64,u64:bool) {
    "less_eq_u64"
}

// 164
fun{unsafe, inline, asm} .asm.less.eq(u128,u128:bool) {
    "less_eq_u128"
}

// 165
fun{unsafe, inline, asm} .asm.less.eq(i8,i8:bool) {
    "less_eq_i8"
}

// 166
fun{unsafe, inline, asm} .asm.less.eq(i16,i16:bool) {
    "less_eq_i16"
}

// 167
fun{unsafe, inline, asm} .asm.less.eq(i32,i32:bool) {
    "less_eq_i32"
}

// 168
fun{unsafe, inline, asm} .asm.less.eq(i64,i64:bool) {
    "less_eq_i64"
}

// 169
fun{unsafe, inline, asm} .asm.less.eq(i128,i128:bool) {
    "less_eq_i128"
}


// 170
fun{unsafe, inline, asm} .asm.great(u8,u8:bool) {
    "great_u8"
}

// 171
fun{unsafe, inline, asm} .asm.great(u16,u16:bool) {
    "great_u16"
}

// 172
fun{unsafe, inline, asm} .asm.great(u32,u32:bool) {
    "great_u32"
}

// 173
fun{unsafe, inline, asm} .asm.great(u64,u64:bool) {
    "great_u64"
}

// 174
fun{unsafe, inline, asm} .asm.great(u128,u128:bool) {
    "great_u128"
}

// 175
fun{unsafe, inline, asm} .asm.great(i8,i8:bool) {
    "great_i8"
}

// 176
fun{unsafe, inline, asm} .asm.great(i16,i16:bool) {
    "great_i16"
}

// 177
fun{unsafe, inline, asm} .asm.great(i32,i32:bool) {
    "great_i32"
}

// 178
fun{unsafe, inline, asm} .asm.great(i64,i64:bool) {
    "great_i64"
}

// 179
fun{unsafe, inline, asm} .asm.great(i128,i128:bool) {
    "great_i128"
}


// 180
fun{unsafe, inline, asm} .asm.great.eq(u8,u8:bool) {
    "great_eq_u8"
}

// 181
fun{unsafe, inline, asm} .asm.great.eq(u16,u16:bool) {
    "great_eq_u16"
}

// 182
fun{unsafe, inline, asm} .asm.great.eq(u32,u32:bool) {
    "great_eq_u32"
}

// 183
fun{unsafe, inline, asm} .asm.great.eq(u64,u64:bool) {
    "great_eq_u64"
}

// 184
fun{unsafe, inline, asm} .asm.great.eq(u128,u128:bool) {
    "great_eq_u128"
}

// 185
fun{unsafe, inline, asm} .asm.great.eq(i8,i8:bool) {
    "great_eq_i8"
}

// 186
fun{unsafe, inline, asm} .asm.great.eq(i16,i16:bool) {
    "great_eq_i16"
}

// 187
fun{unsafe, inline, asm} .asm.great.eq(i32,i32:bool) {
    "great_eq_i32"
}

// 188
fun{unsafe, inline, asm} .asm.great.eq(i64,i64:bool) {
    "great_eq_i64"
}

// 189
fun{unsafe, inline, asm} .asm.great.eq(i128,i128:bool) {
    "great_eq_i128"
}


// 190
fun{unsafe, inline, asm} .asm.to(u8:u16) {
    "u8_to_u16"
}

// 191
fun{unsafe, inline, asm} .asm.to(u8:u32) {
    "u8_to_u32"
}

// 192
fun{unsafe, inline, asm} .asm.to(u8:u64) {
    "u8_to_u64"
}

// 193
fun{unsafe, inline, asm} .asm.to(u8:u128) {
    "u8_to_u128"
}

// 194
fun{unsafe, inline, asm} .asm.to(u16:u8) {
    "u16_to_u8"
}

// 195
fun{unsafe, inline, asm} .asm.to(u16:u32) {
    "u16_to_u32"
}

// 196
fun{unsafe, inline, asm} .asm.to(u16:u64) {
    "u16_to_u64"
}

// 197
fun{unsafe, inline, asm} .asm.to(u16:u128) {
    "u16_to_u128"
}

// 198
fun{unsafe, inline, asm} .asm.to(u32:u8) {
    "u32_to_u8"
}

// 199
fun{unsafe, inline, asm} .asm.to(u32:u16) {
    "u32_to_u16"
}


// 200
fun{unsafe, inline, asm} .asm.to(u32:u64) {
    "u32_to_u64"
}

// 201
fun{unsafe, inline, asm} .asm.to(u32:u128) {
    "u32_to_u128"
}

// 202
fun{unsafe, inline, asm} .asm.to(u64:u8) {
    "u64_to_u8"
}

// 203
fun{unsafe, inline, asm} .asm.to(u64:u16) {
    "u64_to_u16"
}

// 204
fun{unsafe, inline, asm} .asm.to(u64:u32) {
    "u64_to_u32"
}

// 205
fun{unsafe, inline, asm} .asm.to(u64:u128) {
    "u64_to_u128"
}

// 206
fun{unsafe, inline, asm} .asm.to(u128:u8) {
    "u128_to_u8"
}

// 207
fun{unsafe, inline, asm} .asm.to(u128:u16) {
    "u128_to_u16"
}

// 208
fun{unsafe, inline, asm} .asm.to(u128:u32) {
    "u128_to_u32"
}

// 209
fun{unsafe, inline, asm} .asm.to(u128:u64) {
    "u128_to_u64"
}


// 210
fun{unsafe, inline, asm} .asm.load(u64:u8) {
    "load_u8"
}

// 211
fun{unsafe, inline, asm} .asm.load(u64:u16) {
    "load_u16"
}

// 212
fun{unsafe, inline, asm} .asm.load(u64:u32) {
    "load_u32"
}

// 213
fun{unsafe, inline, asm} .asm.load(u64:u64) {
    "load_u64"
}

// 214
fun{unsafe, inline, asm} .asm.load(u64:u128) {
    "load_u128"
}

// 215
fun{unsafe, inline, asm} .asm.store(u64,u8:) {
    "store_u8"
}

// 216
fun{unsafe, inline, asm} .asm.store(u64,u16:) {
    "store_u16"
}

// 217
fun{unsafe, inline, asm} .asm.store(u64,u32:) {
    "store_u32"
}

// 218
fun{unsafe, inline, asm} .asm.store(u64,u64:) {
    "store_u64"
}

// 219
fun{unsafe, inline, asm} .asm.store(u64,u128:) {
    "store_u128"
}


// 240
fun{unsafe, inline, asm} .asm.xor(u8,u8:u8) {
    "xor_u8"
}

// 241
fun{unsafe, inline, asm} .asm.xor(u16,u16:u16) {
    "xor_u16"
}

// 242
fun{unsafe, inline, asm} .asm.xor(u32,u32:u32) {
    "xor_u32"
}

// 243
fun{unsafe, inline, asm} .asm.xor(u64,u64:u64) {
    "xor_u64"
}

// 244
fun{unsafe, inline, asm} .asm.xor(u128,u128:u128) {
    "xor_u128"
}

// 245-249


// 250
fun{unsafe, inline, asm} .asm.debug(:) {
    "debug"
}

// 251
fun{unsafe, inline, asm} .asm.debug(u8:) {
    "debug_u8"
}

// 252
fun{unsafe, inline, asm} .asm.debug(u16:) {
    "debug_u16"
}

// 253
fun{unsafe, inline, asm} .asm.debug(u32:) {
    "debug_u32"
}

// 254
fun{unsafe, inline, asm} .asm.debug(u64:) {
    "debug_u64"
}

// 255
fun{unsafe, inline, asm} .asm.debug(u128:) {
    "debug_u128"
}
