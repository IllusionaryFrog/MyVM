
//
// drops i16 value
//
fun{safe, stc, inline} drop(i16:) {
    .asm.drop(u16:)
}

//
// swaps two i16 values
//
fun{safe, stc, inline} swap(i16,i16:i16,i16) {
    .asm.swap(u16,u16:u16,u16)
}

//
// rotates three i16 values,
// moving the third value to the front
//
fun{safe, stc, inline} rotate(i16,i16,i16:i16,i16,i16) {
    .asm.rotate(u16,u16,u16:u16,u16,u16)
}

//
// duplicates i16 value
//
fun{safe, stc, inline} dup(i16:i16,i16) {
    .asm.dup(u16:u16,u16)
}

//
// duplicates second i16 to the front
//
fun{safe, stc, inline} over(i16,i16:i16,i16,i16) {
    .asm.over(u16,u16:u16,u16,u16)
}

//
// bitwise i16 and
//
fun{safe, stc, inline} &(i16,i16:i16) {
    .asm.and(u16,u16:u16)
}

//
// bitwise i16 or
//
fun{safe, stc, inline} |(i16,i16:i16) {
    .asm.or(u16,u16:u16)
}

//
// bitwise i16 xor
//
fun{safe, stc, inline} ^(i16,i16:i16) {
    .asm.xor(u16,u16:u16)
}

//
// bitwise i16 shift left
//
fun{safe, stc, inline} <<(i16,u8:i16) {
    .asm.shift.l(u16,u8:u16)
}

//
// bitwise i16 shift right
//
fun{safe, stc, inline} >>(i16,u8:i16) {
    .asm.shift.r(u16,u8:u16)
}

//
// bitwise i16 rotate left
//
fun{safe, stc, inline} <<<(i16,u8:i16) {
    .asm.rotate.l(u16,u8:u16)
}

//
// bitwise i16 rotate right
//
fun{safe, stc, inline} >>>(i16,u8:i16) {
    .asm.rotate.r(u16,u8:u16)
}

//
// checks if two i16 values are equal
//
fun{safe, inline} ==(i16,i16:bool) {
    .asm.eq(i16,i16:i16)
}

//
// checks if two i16 values are not equal
//
fun{safe, inline} !=(i16,i16:bool) {
    .asm.not.eq(i16,i16:i16)
}

//
// adds two i16 values
//
fun{safe, inline} +(i16,i16:i16) {
    .asm.add(i16,i16:i16)
}

//
// subtracts two i16 values
//
fun{safe, inline} -(i16,i16:i16) {
    .asm.sub(i16,i16:i16)
}

//
// increments i16 value by 1
//
fun{inline} ++(i16:i16) {
    1i16 +(i16,i16:i16)
}

//
// decrements i16 value by 1
//
fun{inline} --(i16:i16) {
    1i16 -(i16,i16:i16)
}

//
// multiplies two i16 values
//
fun{safe, inline} *(i16,i16:i16) {
    .asm.mul(i16,i16:i16)
}

//
// divides two i16 values
//
fun{safe, inline} /(i16,i16:i16) {
    .asm.div(i16,i16:i16)
}

//
// remainder of the division from two i16 values
//
fun{safe, inline} %(i16,i16:i16) {
    .asm.mod(i16,i16:i16)
}

//
// checks if the second i16 is less then the first
//
fun{safe, inline} <(i16,i16:bool) {
    .asm.less(i16,i16:bool)
}

//
// checks if the second i16 is less or equal then the first
//
fun{safe, inline} <=(i16,i16:bool) {
    .asm.less.eq(i16,i16:bool)
}

//
// checks if the second i16 is greater then the first
//
fun{safe, inline} >(i16,i16:bool) {
    .asm.great(i16,i16:bool)
}

//
// checks if the second i16 is greater or equal then the first
//
fun{safe, inline} >=(i16,i16:bool) {
    .asm.great.eq(i16,i16:bool)
}

//
// converts a i16 to a u16
//
fun{safe, inline} to(i16:u16) {
    .unwrap
}

//
// converts a i16 to a i8
//
fun{safe, inline} to(i16:i8) {
    .asm.to(i16:i8)
}

//
// converts a i16 to a i32
//
fun{safe, inline} to(i16:i32) {
    .asm.to(i16:i32)
}

//
// converts a i16 to a i64
//
fun{safe, inline} to(i16:i64) {
    .asm.to(i16:i64)
}

//
// converts a i16 to a i128
//
fun{safe, inline} to(i16:i128) {
    .asm.to(i16:i128)
}

//
// debugs i16 value
//
fun{safe, inline} debug(i16:) {
    .asm.debug(i16:)
}
