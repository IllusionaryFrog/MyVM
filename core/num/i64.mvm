
//
// drops i64 value
//
fun{safe, stc, inline} drop(i64:) {
    .asm.drop(u64:)
}

//
// swaps two i64 values
//
fun{safe, stc, inline} swap(i64,i64:i64,i64) {
    .asm.swap(u64,u64:u64,u64)
}

//
// rotates three i64 values,
// moving the third value to the front
//
fun{safe, stc, inline} rotate(i64,i64,i64:i64,i64,i64) {
    .asm.rotate(u64,u64,u64:u64,u64,u64)
}

//
// duplicates i64 value
//
fun{safe, stc, inline} .(i64:i64,i64) {
    .asm.dup(u64:u64,u64)
}

//
// duplicates second i64 to the front
//
fun{safe, stc, inline} ..(i64,i64:i64,i64,i64) {
    .asm.over(u64,u64:u64,u64,u64)
}

//
// bitwise i64 and
//
fun{safe, stc, inline} &(i64,i64:i64) {
    .asm.and(u64,u64:u64)
}

//
// bitwise i64 or
//
fun{safe, stc, inline} |(i64,i64:i64) {
    .asm.or(u64,u64:u64)
}

//
// bitwise i64 xor
//
fun{safe, stc, inline} ^(i64,i64:i64) {
    .asm.xor(u64,u64:u64)
}

//
// bitwise i64 shift left
//
fun{safe, stc, inline} <<(i64,u8:i64) {
    .asm.shift.l(u64,u8:u64)
}

//
// bitwise i64 shift right
//
fun{safe, stc, inline} >>(i64,u8:i64) {
    .asm.shift.r(u64,u8:u64)
}

//
// bitwise i64 rotate left
//
fun{safe, stc, inline} <<<(i64,u8:i64) {
    .asm.rotate.l(u64,u8:u64)
}

//
// bitwise i64 rotate right
//
fun{safe, stc, inline} >>>(i64,u8:i64) {
    .asm.rotate.r(u64,u8:u64)
}

//
// checks if two i64 values are equal
//
fun{safe, inline} ==(i64,i64:bool) {
    .asm.eq(i64,i64:i64)
}

//
// checks if two i64 values are not equal
//
fun{safe, inline} !=(i64,i64:bool) {
    .asm.not.eq(i64,i64:i64)
}

//
// adds two i64 values
//
fun{safe, inline} +(i64,i64:i64) {
    .asm.add(i64,i64:i64)
}

//
// subtracts two i64 values
//
fun{safe, inline} -(i64,i64:i64) {
    .asm.sub(i64,i64:i64)
}

//
// increments i64 value by 1
//
fun{inline} ++(i64:i64) {
    1i64 +(i64,i64:i64)
}

//
// decrements i64 value by 1
//
fun{inline} --(i64:i64) {
    1i64 -(i64,i64:i64)
}

//
// multiplies two i64 values
//
fun{safe, inline} *(i64,i64:i64) {
    .asm.mul(i64,i64:i64)
}

//
// divides two i64 values
//
fun{safe, inline} /(i64,i64:i64) {
    .asm.div(i64,i64:i64)
}

//
// remainder of the division from two i64 values
//
fun{safe, inline} %(i64,i64:i64) {
    .asm.mod(i64,i64:i64)
}

//
// checks if the second i64 is less then the first
//
fun{safe, inline} <(i64,i64:bool) {
    .asm.less(i64,i64:bool)
}

//
// checks if the second i64 is less or equal then the first
//
fun{safe, inline} <=(i64,i64:bool) {
    .asm.less.eq(i64,i64:bool)
}

//
// checks if the second i64 is greater then the first
//
fun{safe, inline} >(i64,i64:bool) {
    .asm.great(i64,i64:bool)
}

//
// checks if the second i64 is greater or equal then the first
//
fun{safe, inline} >=(i64,i64:bool) {
    .asm.great.eq(i64,i64:bool)
}

//
// converts a i64 to a u64
//
fun{safe, inline} to(i64:u64) {
    .unwrap
}

//
// converts a i64 to a i8
//
fun{safe, inline} to(i64:i8) {
    .asm.to(i64:i8)
}

//
// converts a i64 to a i16
//
fun{safe, inline} to(i64:i16) {
    .asm.to(i64:i16)
}

//
// converts a i64 to a i32
//
fun{safe, inline} to(i64:i32) {
    .asm.to(i64:i32)
}

//
// converts a i64 to a i128
//
fun{safe, inline} to(i64:i128) {
    .asm.to(i64:i128)
}

//
// debugs i64 value
//
fun{safe, inline} debug(i64:) {
    .asm.debug(i64:)
}
