
//
// drops string value
//
fun{safe, stc, inline} drop(string:) {
    .asm.drop(u128:)
}

//
// swaps two string values
//
fun{safe, stc, inline} swap(string,string:string,string) {
    .asm.swap(u128,u128:u128,u128)
}

//
// rotates three string values,
// moving the third value to the front
//
fun{safe, stc, inline} rotate(string,string,string:string,string,string) {
    .asm.rotate(u128,u128,u128:u128,u128,u128)
}

//
// duplicates string value
//
fun{safe, stc, inline} .(string:string,string) {
    .asm.dup(u128:u128,u128)
}

//
// duplicates second string to the front
//
fun{safe, stc, inline} ..(string,string:string,string,string) {
    .asm.over(u128,u128:u128,u128,u128)
}

//
// length of the string,
//
fun{safe, inline} len(string:u64) {
    .unwrap .asm.swap(u64,u64:u64,u64) .asm.drop(u64:)
}

//
// length of the string,
// not consuming the string
//
fun{safe, stc, inline} len(string:string,u64) {
    .(u64:u64,u64)
}

//
// checks if a string starts with another string
//
fun{safe} starts_with(string,string:bool) {
    let p: string;
    let s: string;

    if (
        s len(string:u64)
        p len(string:u64)
            <(u64,u64:bool)
    ) {
        false(:bool) .return
    }

    if (
        s to(string:u64,u64) drop(u64:)
        p to(string:u64,u64) drop(u64:)
            ==(u64,u64:bool)
    ) {
        true(:bool) .return
    }

    p len(string:u64)
    0u64 while (
        ..(u64,u64:u64,u64,u64)
        ..(u64,u64:u64,u64,u64)
            !=(u64,u64:bool)
    ) {
        .(u64:u64,u64)
        p to(string:u64,u64) drop(u64:)
            +(u64,u64:u64)
                .asm.load(u64:u8)
        .(u64:u64,u64)
        s to(string:u64,u64) drop(u64:)
            +(u64,u64:u64)
                .asm.load(u64:u8)

        if (!=(u8,u8:bool)) {
            drop(u64:) drop(u64:)
            false(:bool) .return
        }

        ++(u64:u64)
    } drop(u64:) drop(u64:)

    true(:bool)
}

//
// checks if two string values are equal
//
fun ==(string,string:bool) {
    let s: string;

    if (
        len(string:string,u64)
        s len(string:u64)
            !=(u64,u64:bool)
    ) {
        drop(string:) false(:bool) .return
    }

    s starts_with(string,string:bool)
}

//
// checks if two string values are not equal
//
fun{inline} !=(string,string:bool) {
    ==(string, string: bool) !(bool:bool)
}

//
// returns part of a string,
// dependent on the given range
//
// panics if the range is not within the string
//
fun{safe, stc} range(string,u64,u64:string) {
    .(u128:u128,u128)

    if (>(u64,u64:bool)) {
        "the lower bound has to be greater or equal to the upper bound" panic(string:!)
    }

    ..(u128,u128:u128,u128,u128)
    swap(u64,u64:u64,u64) drop(u64:)
    ..(u64,u64:u64,u64,u64)

    if (<(u64,u64:bool)) {
        "the upper bound has to be less or equal to the length of the string" panic(string:!)
    }

    range_unchecked(string,u64,u64:string)
}

//
// returns part of a string,
// dependent on the given range
//
// SAFETY:
// lower bound is less or equal to upper bound
// upper bound is less or equal to length of the string
//
fun{unsafe, stc} range_unchecked(string,u64,u64:string) {
    ..(u64,u64:u64,u64,u64) -(u64,u64:u64)
    swap(u128,u128:u128,u128) drop(u64:)
    rotate(u64,u64,u64:u64,u64,u64) +(u64,u64:u64)
    swap(u64,u64:u64,u64)
}

//
// splits a string at an index,
// returning the prefix and suffix
//
// panics if the index is greater then the length
//
fun{safe, stc} split(string,u64:string,string) {
    .(u64:u64,u64) ..(string,string:string,string,string) len(string:u64)
    if (>(u64,u64:bool)) {
        "the index has to be less or equal to the length of the string" panic(string:!)
    }
    split_unchecked(string,u64:string,string)
}

//
// splits a string at an index,
// returning the prefix and suffix
//
// SAFETY:
// the index is less or equal to the length
//
fun{unsafe} split_unchecked(string,u64:string,string) {
    let idx: u64;
    let s: string;

    s 0u64 idx range_unchecked(string,u64,u64:string)
    s idx s len(string:u64) range_unchecked(string,u64,u64:string)
}

//
// converts a string to a u64, u64 (ptr, len)
//
fun{safe, stc, inline} to(string:u64,u64) {}

//
// converts a u64, u64 (ptr, len) to a string
//
// SAFETY:
// ptr and len have to be valid
// and have to exist forever (never dropped)
//
fun{unsafe, stc, inline} to(u64,u64:string) {}

//
// prints the string
//
// panics if the vm does not print the entire string
//
fun{safe} print(string:) {
    let len: u64 .(string:string,string) len(string:u64);

    .asm.write(string:u64)

    if (len !=(u64,u64:bool)) {
        "error printing string" panic(string:!)
    }
}
